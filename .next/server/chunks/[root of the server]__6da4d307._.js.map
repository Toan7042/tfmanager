{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/tf-manager/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAChB","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/tf-manager/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport prisma from \"@/lib/prisma\";\n\nconst handler = NextAuth({\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  callbacks: {\n    async signIn({ user, account }) {\n      if (!user.email) return false;\n\n      const existingUser = await prisma.user.findUnique({\n        where: { email: user.email },\n      });\n\n      const sessionExpireTime = parseInt(process.env.SESSION_EXPIRE_TIME || \"86400\"); // 1 ng√†y\n\n      if (!existingUser) {\n        const createdUser = await prisma.user.create({\n          data: {\n            email: user.email,\n            name: user.name,\n            avatar: user.image,\n            providerId: account?.providerAccountId || \"\",\n            lastLoginTime: new Date(),\n            role: \"user\",\n          },\n        });\n\n        await prisma.userSessionPoint.create({\n          data: {\n            userId: createdUser.id,\n            sessionToken: account?.access_token || \"\",\n            deviceInfo: account?.providerAccountId || \"\",\n            expiresAt: new Date(Date.now() + sessionExpireTime * 1000),\n          },\n        });\n      } else {\n        await prisma.user.update({\n          where: { email: user.email },\n          data: { lastLoginTime: new Date() },\n        });\n\n        await prisma.userSessionPoint.deleteMany({\n          where: {\n            userId: existingUser.id,\n            sessionToken: { not: account?.access_token },\n          },\n        });\n\n        await prisma.userSessionPoint.create({\n          data: {\n            userId: existingUser.id,\n            sessionToken: account?.access_token || \"\",\n            deviceInfo: account?.providerAccountId || \"\",\n            expiresAt: new Date(Date.now() + sessionExpireTime * 1000),\n          },\n        });\n      }\n\n      return true;\n    },\n\n    async jwt({ token }) {\n      if (!token.email) return {};\n\n      const dbUser = await prisma.user.findUnique({\n        where: { email: token.email },\n      });\n\n      if (dbUser) {\n        token.id = dbUser.id;\n        token.role = dbUser.role;\n\n        const session = await prisma.userSessionPoint.findFirst({\n          where: {\n            userId: dbUser.id,\n            sessionToken: token.currentSessionToken as string | undefined,\n          },\n        });\n\n        if (!session || new Date(session.expiresAt) < new Date()) {\n          console.log(\"Session expired or invalid.\");\n          return {};\n        }\n      } else {\n        console.log(\"User does not exist, removing token...\");\n        return {};\n      }\n\n      return token;\n    },\n\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n        session.user.currentSessionToken = token.currentSessionToken as string | undefined;\n      }\n      return session;\n    },\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: parseInt(process.env.SESSION_EXPIRE_TIME || \"86400\"),\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n});\n\nexport { handler as GET, handler as POST };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}