{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/TFKey/tf-manager/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions: AuthOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        username: { label: \"Username\", type: \"text\", placeholder: \"yourname\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.username || !credentials?.password) {\r\n          throw new Error(\"Missing credentials\");\r\n        }\r\n        const user = await prisma.user.findUnique({\r\n          where: { username: credentials.username },\r\n        });\r\n        if (!user || !bcrypt.compareSync(credentials.password, user.password)) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n        return user;\r\n      },\r\n    }),\r\n  ],\r\n  session: { strategy: \"jwt\" as const }, // ðŸ”¹ Fix lá»—i kiá»ƒu dá»¯ liá»‡u\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAA2B;IACtC,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE;IACvB,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;oBAAQ,aAAa;gBAAW;gBACrE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,YAAY,CAAC,aAAa,UAAU;oBACpD,MAAM,IAAI,MAAM;gBAClB;gBACA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,UAAU,YAAY,QAAQ;oBAAC;gBAC1C;gBACA,IAAI,CAAC,QAAQ,CAAC,mIAAA,CAAA,UAAM,CAAC,WAAW,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ,GAAG;oBACrE,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO;YACT;QACF;KACD;IACD,SAAS;QAAE,UAAU;IAAe;AACtC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}