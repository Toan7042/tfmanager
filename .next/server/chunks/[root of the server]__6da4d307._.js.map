{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/TFKey/tf-manager/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAChB","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/TFKey/tf-manager/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport prisma from \"@/lib/prisma\";\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  callbacks: {\n    async signIn({ user, account }) {\n      if (!user.email) return false;\n\n      const existingUser = await prisma.user.findUnique({\n        where: { email: user.email },\n      });\n\n      if (!existingUser) {\n        await prisma.user.create({\n          data: {\n            email: user.email,\n            name: user.name,\n            avatar: user.image,\n            providerId: account?.providerAccountId || \"\",\n            lastLoginTime: new Date(),\n            role: \"user\",\n          },\n        });\n      } else {\n        await prisma.user.update({\n          where: { email: user.email },\n          data: { lastLoginTime: new Date() },\n        });\n      }\n\n      return true;\n    },\n\n    async jwt({ token }) {\n      const dbUser = await prisma.user.findUnique({\n        where: { email: token.email! },\n      });\n    \n      if (dbUser) {\n        token.id = dbUser.id;\n        token.role = dbUser.role;\n      } else {\n        console.log(\"User không tồn tại, xoá token...\");\n        return {};\n      }\n    \n      return token;\n    },    \n\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n      }\n      return session;\n    },\n  },\n  session: { strategy: \"jwt\" },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n\n\n// import NextAuth, { AuthOptions } from \"next-auth\";\n// import GoogleProvider from \"next-auth/providers/google\";\n// import prisma from \"@/lib/prisma\";\n\n// export const authOptions: AuthOptions = {\n//   providers: [\n//     GoogleProvider({\n//       clientId: process.env.GOOGLE_CLIENT_ID!,\n//       clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n//     }),\n//   ],\n//   callbacks: {\n//     async signIn({ user, account }) {\n//       if (!user.email) return false;\n\n//       const existingUser = await prisma.user.findUnique({\n//         where: { email: user.email },\n//       });\n\n//       if (!existingUser) {\n//         await prisma.user.create({\n//           data: {\n//             email: user.email,\n//             name: user.name,\n//             avatar: user.image,\n//             providerId: account?.providerAccountId || \"\",\n//             lastLoginTime: new Date(),\n//             role: \"user\", // Mặc định user có role \"user\"\n//           },\n//         });\n//       } else {\n//         await prisma.user.update({\n//           where: { email: user.email },\n//           data: { lastLoginTime: new Date() },\n//         });\n//       }\n\n//       return true;\n//     },\n\n//     async jwt({ token }) {\n//       // Kiểm tra user trong database mỗi lần refresh token\n//       const dbUser = await prisma.user.findUnique({\n//         where: { email: token.email! },\n//       });\n    \n//       if (dbUser) {\n//         token.id = dbUser.id;\n//         token.role = dbUser.role; // ✅ Lưu role vào token\n//       } else {\n//         // Nếu user đã bị xóa khỏi database, xóa session ngay lập tức\n//         console.log(\"User không tồn tại, xoá token...\");\n//         return {}; // Trả về token rỗng => mất session\n//       }\n    \n//       console.log(\"Token in JWT callback:\", token); // Debug token\n//       return token;\n//     },    \n\n//     async session({ session, token }) {\n//       if (session.user) {\n//         session.user.id = token.id as string;\n//         session.user.role = token.role as string; // ✅ Lưu role vào session\n//       }\n//       return session;\n//     },\n//   },\n//   session: { strategy: \"jwt\" },\n//   secret: process.env.NEXTAUTH_SECRET,\n// };\n\n// const handler = NextAuth(authOptions);\n// export { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE;YAC5B,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO;YAExB,MAAM,eAAe,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChD,OAAO;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC7B;YAEA,IAAI,CAAC,cAAc;gBACjB,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACvB,MAAM;wBACJ,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,QAAQ,KAAK,KAAK;wBAClB,YAAY,SAAS,qBAAqB;wBAC1C,eAAe,IAAI;wBACnB,MAAM;oBACR;gBACF;YACF,OAAO;gBACL,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACvB,OAAO;wBAAE,OAAO,KAAK,KAAK;oBAAC;oBAC3B,MAAM;wBAAE,eAAe,IAAI;oBAAO;gBACpC;YACF;YAEA,OAAO;QACT;QAEA,MAAM,KAAI,EAAE,KAAK,EAAE;YACjB,MAAM,SAAS,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC1C,OAAO;oBAAE,OAAO,MAAM,KAAK;gBAAE;YAC/B;YAEA,IAAI,QAAQ;gBACV,MAAM,EAAE,GAAG,OAAO,EAAE;gBACpB,MAAM,IAAI,GAAG,OAAO,IAAI;YAC1B,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,OAAO,CAAC;YACV;YAEA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;IACA,SAAS;QAAE,UAAU;IAAM;IAC3B,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;;CAIzB,qDAAqD;CACrD,2DAA2D;CAC3D,qCAAqC;CAErC,4CAA4C;CAC5C,iBAAiB;CACjB,uBAAuB;CACvB,iDAAiD;CACjD,yDAAyD;CACzD,UAAU;CACV,OAAO;CACP,iBAAiB;CACjB,wCAAwC;CACxC,uCAAuC;CAEvC,4DAA4D;CAC5D,wCAAwC;CACxC,YAAY;CAEZ,6BAA6B;CAC7B,qCAAqC;CACrC,oBAAoB;CACpB,iCAAiC;CACjC,+BAA+B;CAC/B,kCAAkC;CAClC,4DAA4D;CAC5D,yCAAyC;CACzC,4DAA4D;CAC5D,eAAe;CACf,cAAc;CACd,iBAAiB;CACjB,qCAAqC;CACrC,0CAA0C;CAC1C,iDAAiD;CACjD,cAAc;CACd,UAAU;CAEV,qBAAqB;CACrB,SAAS;CAET,6BAA6B;CAC7B,8DAA8D;CAC9D,sDAAsD;CACtD,0CAA0C;CAC1C,YAAY;CAEZ,sBAAsB;CACtB,gCAAgC;CAChC,4DAA4D;CAC5D,iBAAiB;CACjB,wEAAwE;CACxE,2DAA2D;CAC3D,yDAAyD;CACzD,UAAU;CAEV,qEAAqE;CACrE,sBAAsB;CACtB,aAAa;CAEb,0CAA0C;CAC1C,4BAA4B;CAC5B,gDAAgD;CAChD,8EAA8E;CAC9E,UAAU;CACV,wBAAwB;CACxB,SAAS;CACT,OAAO;CACP,kCAAkC;CAClC,yCAAyC;CACzC,KAAK;CAEL,yCAAyC;CACzC,8CAA8C","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}