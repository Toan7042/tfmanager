{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/TFKey/tf-manager/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAChB","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/TFKey/tf-manager/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport prisma from \"@/lib/prisma\";\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  callbacks: {\n    async signIn({ user, account }) {\n      if (!user.email) return false; // Không cho phép đăng nhập nếu không có email\n\n      const existingUser = await prisma.user.findUnique({\n        where: { email: user.email },\n      });\n\n      if (!existingUser) {\n        // Nếu user chưa tồn tại, tạo mới với role mặc định là \"user\"\n        await prisma.user.create({\n          data: {\n            email: user.email,\n            name: user.name,\n            avatar: user.image,\n            providerId: account?.providerAccountId || \"\",\n            lastLoginTime: new Date(),\n            role: \"user\", // Mặc định user có role \"user\"\n          },\n        });\n      } else {\n        // Cập nhật lastLoginTime nếu user đã tồn tại\n        await prisma.user.update({\n          where: { email: user.email },\n          data: { lastLoginTime: new Date() },\n        });\n      }\n\n      return true;\n    },\n\n    async jwt({ token }) {\n      // Lấy thông tin user từ database\n      const dbUser = await prisma.user.findUnique({\n        where: { email: token.email! },\n      });\n\n      if (dbUser) {\n        token.id = dbUser.id;\n        token.role = dbUser.role; // Gán role vào token\n      }\n\n      return token;\n    },\n\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string; // Gán role vào session\n      }\n      return session;\n    },\n  },\n  session: { strategy: \"jwt\" },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,mJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE;YAC5B,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO,OAAO,8CAA8C;YAE7E,MAAM,eAAe,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChD,OAAO;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC7B;YAEA,IAAI,CAAC,cAAc;gBACjB,6DAA6D;gBAC7D,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACvB,MAAM;wBACJ,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,QAAQ,KAAK,KAAK;wBAClB,YAAY,SAAS,qBAAqB;wBAC1C,eAAe,IAAI;wBACnB,MAAM;oBACR;gBACF;YACF,OAAO;gBACL,6CAA6C;gBAC7C,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACvB,OAAO;wBAAE,OAAO,KAAK,KAAK;oBAAC;oBAC3B,MAAM;wBAAE,eAAe,IAAI;oBAAO;gBACpC;YACF;YAEA,OAAO;QACT;QAEA,MAAM,KAAI,EAAE,KAAK,EAAE;YACjB,iCAAiC;YACjC,MAAM,SAAS,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC1C,OAAO;oBAAE,OAAO,MAAM,KAAK;gBAAE;YAC/B;YAEA,IAAI,QAAQ;gBACV,MAAM,EAAE,GAAG,OAAO,EAAE;gBACpB,MAAM,IAAI,GAAG,OAAO,IAAI,EAAE,qBAAqB;YACjD;YAEA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,EAAY,uBAAuB;YACnE;YACA,OAAO;QACT;IACF;IACA,SAAS;QAAE,UAAU;IAAM;IAC3B,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,qIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/TON/Desktop/WEBCODE/NextJS/TFKey/tf-manager/app/admin/page.tsx"],"sourcesContent":["import { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"../api/auth/[...nextauth]/route\";\r\nimport { redirect } from \"next/navigation\";\r\n\r\nexport default async function AdminPage() {\r\n  const session = await getServerSession(authOptions);\r\n\r\n  if (!session || session.user.role !== \"admin\") {\r\n    <h1>Không phải admin</h1>;\r\n    // redirect(\"/\"); // Chặn truy cập nếu không phải admin\r\n  }\r\n\r\n  return <h1>Admin Dashboard</h1>;\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAGe,eAAe;IAC5B,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,iJAAA,CAAA,cAAW;IAElD,IAAI,CAAC,WAAW,QAAQ,IAAI,CAAC,IAAI,KAAK,SAAS;sBAC7C,8OAAC;sBAAG;;;;;;IACJ,uDAAuD;IACzD;IAEA,qBAAO,8OAAC;kBAAG;;;;;;AACb","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}